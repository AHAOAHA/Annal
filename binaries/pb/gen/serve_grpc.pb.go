// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: serve.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	CreateTodoTask(ctx context.Context, in *CreateTodoTaskRequest, opts ...grpc.CallOption) (*CreateTodoTaskResponse, error)
	ListTodoTasks(ctx context.Context, in *ListTodoTasksRequest, opts ...grpc.CallOption) (*ListTodoTasksResponse, error)
	UpdateTodoTask(ctx context.Context, in *UpdateTodoTaskRequest, opts ...grpc.CallOption) (*UpdateTodoTaskResponse, error)
	PruneTodoTasks(ctx context.Context, in *PruneTodoTasksRequest, opts ...grpc.CallOption) (*PruneTodoTasksResponse, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodoTask(ctx context.Context, in *CreateTodoTaskRequest, opts ...grpc.CallOption) (*CreateTodoTaskResponse, error) {
	out := new(CreateTodoTaskResponse)
	err := c.cc.Invoke(ctx, "/AHAOAHA.Annal.TodoService/CreateTodoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) ListTodoTasks(ctx context.Context, in *ListTodoTasksRequest, opts ...grpc.CallOption) (*ListTodoTasksResponse, error) {
	out := new(ListTodoTasksResponse)
	err := c.cc.Invoke(ctx, "/AHAOAHA.Annal.TodoService/ListTodoTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) UpdateTodoTask(ctx context.Context, in *UpdateTodoTaskRequest, opts ...grpc.CallOption) (*UpdateTodoTaskResponse, error) {
	out := new(UpdateTodoTaskResponse)
	err := c.cc.Invoke(ctx, "/AHAOAHA.Annal.TodoService/UpdateTodoTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) PruneTodoTasks(ctx context.Context, in *PruneTodoTasksRequest, opts ...grpc.CallOption) (*PruneTodoTasksResponse, error) {
	out := new(PruneTodoTasksResponse)
	err := c.cc.Invoke(ctx, "/AHAOAHA.Annal.TodoService/PruneTodoTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	CreateTodoTask(context.Context, *CreateTodoTaskRequest) (*CreateTodoTaskResponse, error)
	ListTodoTasks(context.Context, *ListTodoTasksRequest) (*ListTodoTasksResponse, error)
	UpdateTodoTask(context.Context, *UpdateTodoTaskRequest) (*UpdateTodoTaskResponse, error)
	PruneTodoTasks(context.Context, *PruneTodoTasksRequest) (*PruneTodoTasksResponse, error)
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateTodoTask(context.Context, *CreateTodoTaskRequest) (*CreateTodoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodoTask not implemented")
}
func (UnimplementedTodoServiceServer) ListTodoTasks(context.Context, *ListTodoTasksRequest) (*ListTodoTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodoTasks not implemented")
}
func (UnimplementedTodoServiceServer) UpdateTodoTask(context.Context, *UpdateTodoTaskRequest) (*UpdateTodoTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTodoTask not implemented")
}
func (UnimplementedTodoServiceServer) PruneTodoTasks(context.Context, *PruneTodoTasksRequest) (*PruneTodoTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PruneTodoTasks not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateTodoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AHAOAHA.Annal.TodoService/CreateTodoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodoTask(ctx, req.(*CreateTodoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_ListTodoTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodoTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).ListTodoTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AHAOAHA.Annal.TodoService/ListTodoTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).ListTodoTasks(ctx, req.(*ListTodoTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_UpdateTodoTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTodoTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).UpdateTodoTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AHAOAHA.Annal.TodoService/UpdateTodoTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).UpdateTodoTask(ctx, req.(*UpdateTodoTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_PruneTodoTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PruneTodoTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).PruneTodoTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AHAOAHA.Annal.TodoService/PruneTodoTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).PruneTodoTasks(ctx, req.(*PruneTodoTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AHAOAHA.Annal.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodoTask",
			Handler:    _TodoService_CreateTodoTask_Handler,
		},
		{
			MethodName: "ListTodoTasks",
			Handler:    _TodoService_ListTodoTasks_Handler,
		},
		{
			MethodName: "UpdateTodoTask",
			Handler:    _TodoService_UpdateTodoTask_Handler,
		},
		{
			MethodName: "PruneTodoTasks",
			Handler:    _TodoService_PruneTodoTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serve.proto",
}
